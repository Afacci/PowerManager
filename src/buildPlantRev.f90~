!---------------------------------------------------------------------------
!  
!   PowerManager.  
!
!---------------------------------------------------------------------------
!License
!    This file is part of PowerManager.
!
!    PowerManager is free software; you can redistribute it and/or modify it
!    under the terms of the GNU General Public License as published by the
!    Free Software Foundation; either version 2 of the License, or (at your
!    option) any later version.
!
!    PowerManager is distributed in the hope that it will be useful, but WITHOUT
!    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
!    FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
!    for more details.
!
!    You should have received a copy of the GNU General Public License
!    along with OpenFOAM; if not, write to the Free Software Foundation,
!    Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
!
!>\file buildPlant.f90
!>\brief 
!> Collects all the informations relative to the power plant.
!>\author 
!  Andrea Facci.
!
!---------------------------------------------------------------------------

!>\brief 
!> Collects all the informations relative to the power plant.
!>\details
!> Collects all the informations relative to the power plant starting from the 
!> Inputs of the single machinery. Calculates the efficiencies for each given
!> set-point and store them in a single array.
!> Perform units of measure conversions when necessary.
!>\author 
!  Andrea Facci.
subroutine buildPlantRev

!---Declare Module usage---

use cmdVar
use inputVar
use plantVar
use mathTools
use interfaces
use myArithmetic
use sun
use eolo
use addSection

!---Declare Local Variables---
implicit none

interface
  real(kind=prec) function timestep()
    use shared 
    use plantvar
    use inputvar
    implicit none
  end function
end interface

integer :: i,j, maxsp, k, k1, k2
real(kind = prec)      :: kJ_kWh, dsp, dtmin, dsoc, dsocEl, dspEl
real(kind = prec), allocatable, dimension(:,:) :: upTimeVinc, downTimeVinc
real(kind = prec), dimension(1) :: rdummy1, rdummy2
real(kind = prec), dimension(:,:,:), allocatable :: tCorr, pCorr
real(kind = prec), dimension(:,:), allocatable :: aCorr
integer :: nMax

!--subroutine body-----

call allocateVar(16)

dt        = timestep()
upTime0   = upTime0*3.6e3
downTime0 = downTime0*3.6e3


nm0  = nTrig + nBoi + nChi                      !total number of machinery without storage
nm   = nm0
if(capacityTS.gt.zero.and.PmaxTS.gt.zero) then
   nm  = nm + 1                                 !total number of machinery with thermal storage
endif
if(capacityES.gt.zero.and.PmaxES.gt.zero) then
   nm  = nm + 1                                 !total number of machinery with electrical storage
endif

nSpTot = 0
if(nBoi.gt.0) nSpTot = nSpTot + sum(nSpT)
if(nBoi.gt.0) nSpTot = nSpTot + sum(nSpB)
if(nChi.gt.0) nSpTot = nSpTot + sum(nSpC)
if(capacityTS.gt.zero) nSpTot = nSpTot + 2*nSpTS + 1
if(capacityES.gt.zero) nSpTot = nSpTot + 2*nSpES + 1

call allocateVar(17)

nMax = max(maxval(nSpT), maxval(nSpB), maxval(nSpC), 2*nSpTS + 1,2*nSpES + 1)
call allocateVar(18,nMax)

sp(:,:) = rNan(rVal)
eSource(:) = -1

!---Estimate environmental condition corrections for each time-step---
call allocateVar(32)

!allocate(pCorr(nTime,nm,4), tCorr(nTime,nm,4), aCorr(nm,4))
!pCorr = rNan(rVal)
!tCorr = rNan(rVal)
!aCorr = rNan(rVal)
   
!   k = 0
!   do j=is(iB),ie(iB)
!      k = k + 1
!      rdummy2= interpolation(tempCorrB(:,1,k), tempCorrB(:,2,k), ntcB(k), tAmb(i),1)
!      tCorr(i,j,2) = rdummy2(1)
!      rdummy2= interpolation(tempCorrB(:,1,k), tempCorrB(:,3,k), ntcB(k), tAmb(i),1)
!      tCorr(i,j,4) = rdummy2(1)
!
!      rdummy2= interpolation(presCorrB(:,1,k), presCorrB(:,2,k), npcB(k), pAmb(i),1)
!      pCorr(i,j,2) = rdummy2(1)
!      rdummy2= interpolation(presCorrB(:,1,k), presCorrB(:,3,k), npcB(k), pAmb(i),1)
!      pCorr(i,j,4) = rdummy2(1)
!   enddo
!   k = 0
!   do j=is(iC),ie(iC)
!      k = k + 1
!      rdummy2= interpolation(tempCorrC(:,1,k), tempCorrC(:,2,k), ntcC(k), tAmb(i),1)
!      tCorr(i,j,3) = rdummy2(1)
!      rdummy2= interpolation(tempCorrC(:,1,k), tempCorrC(:,3,k), ntcC(k), tAmb(i),1)
!      tCorr(i,j,4) = rdummy2(1)!
!
!      rdummy2= interpolation(presCorrC(:,1,k), presCorrC(:,2,k), npcC(k), pAmb(i),1)
!      pCorr(i,j,3) = rdummy2(1)
!      rdummy2= interpolation(presCorrC(:,1,k), presCorrC(:,3,k), npcC(k), pAmb(i),1)
!      pCorr(i,j,4) = rdummy2(1)
!   enddo
!enddo

!k = 0
!do j=is(iT),ie(iT)
!   k = k + 1
!   rdummy2= interpolation(altCorrT(:,1,k), altCorrT(:,2,k), nacT(k), altitude,1)
!   aCorr(j,1) = rdummy2(1)
!   rdummy2= interpolation(altCorrT(:,1,k), altCorrT(:,3,k), nacT(k), altitude,1)
!   aCorr(j,2) = rdummy2(1)
!   rdummy2= interpolation(altCorrT(:,1,k), altCorrT(:,4,k), nacT(k), altitude,1)
!   aCorr(j,3) = rdummy2(1)
!   rdummy2= interpolation(altCorrT(:,1,k), altCorrT(:,5,k), nacT(k), altitude,1)
!   aCorr(j,4) = rdummy2(1)
!enddo
!k = 0
!do j=is(iB),ie(iB)
!   k = k + 1
!   rdummy2= interpolation(altCorrB(:,1,k), altCorrB(:,2,k), nacB(k), altitude,1)
!   aCorr(j,2) = rdummy2(1)
!   rdummy2= interpolation(altCorrB(:,1,k), altCorrB(:,3,k), nacB(k), altitude,1)
!   aCorr(j,4) = rdummy2(1)
!enddo
!k = 0
!do j=is(iC),ie(iC)
!   k = k + 1
!   rdummy2= interpolation(altCorrC(:,1,k), altCorrC(:,2,k), nacC(k), altitude,1)
!   aCorr(j,3) = rdummy2(1)
!   rdummy2= interpolation(altCorrC(:,1,k), altCorrC(:,3,k), nacC(k), altitude,1)
!   aCorr(j,4) = rdummy2(1)
!enddo

envCorr = rNaN(rVal)

is(iT) = 1                   !Trigeneration
ie(iT) = nTrig                             
call addTrigenerative
is(iB) = is(iT) + nTrig      !Boilers
ie(iB) = ie(iT) + nBoi
call addBoilers
is(iC) = is(iB) + nBoi       !Chillers
ie(iC) = ie(iB) + nChi
call addChillers
if(capacityTS.gt.zero.and.PmaxTS.gt.zero) then
   is(iTs)= nm0 + 1
else
   is(iTs)= nm0 
endif
call addThermalStorage
if(capacityES.gt.zero.and.PmaxES.gt.zero) is(iEs)= is(iTs) + 1
call addElectricalStorage

!envCorr = rNaN(rVal)
!do i=1,nTime
!   do j = 1,nm
!      do k = 1,4 
!         envCorr(i,j,k) = tCorr(i,j,k)*pCorr(i,j,k)*aCorr(j,k)
!      enddo
!   enddo
!enddo
!deallocate(aCorr,pCorr,tCorr)


!------renewable stuff--------------------------------
allocate(sunEl(nTime), sunTh(nTime), windEl(nTime))
if(surfPV.gt.zero) then
  sunEl = photo()
else
  sunEl = zero
endif

if(surfSC.gt.zero) then
  sunTh = thermalCollector()
else
  sunTh = zero
endif

if(nwf.gt.0) then
  windEl = windPower()
else
  windEl = zero
endif

!--- check that the power plant is able to satisfie the required loads
call checkPlant

!---time-dependent constraints---
call allocateVar(21)
k1 = maxval(minUpTime)/3.6e3 + 1
k2 = maxval(minDownTime)/3.6e3 + 1
allocate(upTimeVinc(max(k1,k2),nm), downTimeVinc(max(k1,k2),nm))
!min running time
timeVinc(:,:) = zero
do i=1,nm0
   nTv(i) = minUpTime(i)/3.6e3 + 1
   do j=1,ntv(i)
      timeVinc(j,i) = (j - 1)*3.6e3
   enddo
enddo
!min non-running time
do i=1,nm0
   k = nm0 + i
   nTv(k) = minDownTime(i)/3.6e3 + 1
   do j=1,ntv(k)
      timeVinc(j,k) = (j - 1)*3.6e3
   enddo
enddo
!Thermal storage capacity constraint
k = 2*nm0 + 1
nTv(k) = nSoc
do j=1,nsoc
   timeVinc(j,k) = soc(j)
enddo
k = 2*nm0 + 2
nTv(k) = nSocEl
do j=1,nSocEL
   timeVinc(j,k) = Esoc(j)
enddo

!--- convert all the prices in â‚¬/kJ---
kJ_kWh = 1.0/3.6e3
gridBuyCost(:)  = gridBuyCost(:)*kJ_kWh
gridSellCost(:) = gridSellCost(:)*kJ_kWh
cEl(:,:)        = cEl(:,:)*kJ_kWh
cTh(:,:)        = cTh(:,:)*kJ_kWh
cCh(:,:)        = cCh(:,:)*kJ_kWh
c_st = c_st*kJ_kWh
c_tr = c_tr*kJ_kWh


call deallocateVar(1)

end subroutine buildPlantRev

!===============================================================0

